<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>主标题</title>
  
  <subtitle>副标题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-04T08:05:33.611Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>anhr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/04/hello-world/"/>
    <id>http://yoursite.com/2019/11/04/hello-world/</id>
    <published>2019-11-04T07:30:18.600Z</published>
    <updated>2019-11-04T08:05:33.611Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>子容器的Key是很重要的</title>
    <link href="http://yoursite.com/2019/11/04/react/2016-01-02-keys-in-children-components-are-important/"/>
    <id>http://yoursite.com/2019/11/04/react/2016-01-02-keys-in-children-components-are-important/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://facebook.github.io/react/docs/multiple-components.html#dynamic-children" target="_blank" rel="noopener">key</a>必须传递给从数组中动态创建的所有组件的一个值。它是一个唯一且固定的id，用来识别DOM中的每个组件，也可以让我们区别它是否是同一个组件。使用key可以确保子容器是可保存而且不需要重复创建的，还可以防止奇怪的事情发生。</p><blockquote><p>key跟效率不是很相关，它更与身份有关系（这间接的使效率更好）。随机的赋值或改变值将不能识别身份<a href="https://github.com/facebook/react/issues/1342#issuecomment-39230939" target="_blank" rel="noopener">Paul O’Shannessy</a></p></blockquote><ul><li>使用对象存在的的唯一值。</li><li>在父组件定义key,而不是子组件。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line">...</span><br><span class="line">render() &#123;</span><br><span class="line">&lt;div key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;&gt;&#123;% raw %&#125;&#123;&#123;item.name&#125;&#125;&#123;% endraw %&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/good</span></span><br><span class="line"><span class="regexp">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;item.key&#125;&#125;&#123;% endraw %&#125;/</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9" target="_blank" rel="noopener">使用数组索引是一个坏习惯</a></li><li><code>random()</code> 不会起作用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line">&lt;MyComponent key=&#123;% raw %&#125;&#123;&#123;<span class="built_in">Math</span>.random()&#125;&#125;&#123;% endraw %&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li>你可以创建以自己的唯一id。确定这个方法运行速度够快，把它附着到你的对象上。</li><li>当子组件的数量很大或者包含重量级的组件时，使用key来提高性能。</li><li><a href="http://docs.reactjs-china.com/react/docs/animation.html" target="_blank" rel="noopener">你必须提供key值给ReactCSSTransitionGroup的每个子组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/multiple-components.html#dynamic-children&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;key&lt;/a&gt;必须传递给从数组中
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="react" scheme="http://yoursite.com/categories/zh-CN/react/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 tap 来快速 debug</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-03-16-tapping-for-quick-debugging/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-03-16-tapping-for-quick-debugging/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p>在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不用 <code>console.log</code> 这个老方式了？让我来示范一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bank_totals_by_client(bank_info(<span class="number">1</span>, banks), table)</span><br><span class="line">            .filter(<span class="function"><span class="params">c</span> =&gt;</span> c.balance &gt; <span class="number">25000</span>)</span><br><span class="line">            .sort(<span class="function">(<span class="params">c1, c2</span>) =&gt;</span> c1.balance &lt;= c2.balance ? <span class="number">1</span> : <span class="number">-1</span> )</span><br><span class="line">            .map(<span class="function"><span class="params">c</span> =&gt;</span></span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;c.id&#125;</span> | <span class="subst">$&#123;c.tax_number&#125;</span> (<span class="subst">$&#123;c.name&#125;</span>) =&gt; <span class="subst">$&#123;c.balance&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>现在，加入你从这个链式调用中没有得到任何返回。<br>在哪里除了问题呢？或许 <code>bank_info</code> 没有返回东西，我们需要监听（tap）它:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bank_totals_by_client(tap(bank_info(<span class="number">1</span>, banks)), table)</span><br></pre></td></tr></table></figure><p>基于我们特殊的实现，它可能会打印一些东西，也可能什么也不打印。<br>我们假设，打印出来的东西是正确的，因此， <code>bank_info</code> 没有问题。</p><p>我们需要继续调试下一个函数， filter.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(<span class="function"><span class="params">c</span> =&gt;</span> tap(c).balance &gt; <span class="number">25000</span>)</span><br></pre></td></tr></table></figure><p>我们可以得到 <code>c</code> 吗？如果可以，说明 <code>bank_totals_by_client</code> 运行正常。<br>可能是 filter 内的条件有问题？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(<span class="function"><span class="params">c</span> =&gt;</span> tap(c.balance &gt; <span class="number">25000</span>))</span><br></pre></td></tr></table></figure><p>啊哈！我们发现除了 <code>false</code> 没有打印其他东西，所以说明没有一个 client &gt;25000，<br>这就是为什么方法什么也没返回的原因。</p><h2 id="附-更先进的-tap"><a href="#附-更先进的-tap" class="headerlink" title="(附) 更先进的 tap"></a>(附) 更先进的 tap</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">x, fn = x =&gt; x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn(x));</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们来看一下一个更强大的怪物，如果我们想在监听（tap）之前<em>事先</em>做一些操作应该怎么办？比如，我们只想方位某个对象特定的参数，位于一个逻辑运算，等等。使用上面的方法，在调用的时候增加一个额外参数，这个函数在被监听（tap）的时候就会被执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tap(<span class="number">3</span>, x =&gt; x + <span class="number">2</span>) === <span class="number">3</span>; <span class="comment">// prints 5, but expression evaluates to true, why :-)?</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里 tap 是一个小怪物。一个可以用来快速调试、链式调用、匿名函数，还可以打印任何你想打印的东西的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Array 的三个技巧</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-03-12-3-array-hacks/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-03-12-3-array-hacks/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">扩展运算符</a> 你可以做很多很棒事情。在这边文章中，我将为你介绍在编码中有用的3个技巧。</p><h3 id="1-迭代一个空数组"><a href="#1-迭代一个空数组" class="headerlink" title="1. 迭代一个空数组"></a>1. 迭代一个空数组</h3><p>JavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会明白我的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line">[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><p>你会发现，通过一个松散的数组去循环调用一些转换是非常难的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line">&gt; arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index);</span><br><span class="line">[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><p>想要解决这个问题，你可以使用在创建新数组的时候使用 <code>Array.apply</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> arr = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>));</span><br><span class="line">&gt; arr.map(<span class="function">(<span class="params">elem, index</span>) =&gt;</span> index);</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="2-给方法传一个空参数"><a href="#2-给方法传一个空参数" class="headerlink" title="2. 给方法传一个空参数"></a>2. 给方法传一个空参数</h3><p>如果你想调用一个方法，并不填其中的一个参数时，JavaScript 就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; method(<span class="string">'parameter1'</span>, , <span class="string">'parameter3'</span>);</span><br><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Unexpected token ,</span><br></pre></td></tr></table></figure><p>一个人们常用的解决方法是传递 <code>null</code> 或 <code>undefined</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; method(<span class="string">'parameter1'</span>, <span class="literal">null</span>, <span class="string">'parameter3'</span>) <span class="comment">// or</span></span><br><span class="line">&gt; method(<span class="string">'parameter1'</span>, <span class="literal">undefined</span>, <span class="string">'parameter3'</span>);</span><br></pre></td></tr></table></figure><p>自从 JavaScript 把 <code>null</code> 当做一个 object 的时候， 我个人就不太喜欢使用它了。根据 ES6 中对扩展运算符的介绍，有一个更简洁的方法可以将空参数传递给一个方法。正如前文所提到的，数组是松散的，所以给它传空值是可以的，我们正式用到了这个优点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; method(...[<span class="string">'parameter1'</span>, , <span class="string">'parameter3'</span>]); <span class="comment">// works!</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>我一直不明白为什么数组不提供一个内置函数可以让我们方便的取到去重以后的值。扩展运算符帮到了我们，使用扩展运算符配合 <code>Set</code> Spread operators are here for the rescue. Use spread operators with the <code>Set</code> 可以生成一个不重复的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> arr = [...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])];</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Sp
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>选择（picking）和反选（rejecting）对象的属性</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-04-05-picking-and-rejecting-object-properties/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-04-05-picking-and-rejecting-object-properties/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（<code>select</code>）一些字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">obj, keys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> keys.map(<span class="function"><span class="params">k</span> =&gt;</span> k <span class="keyword">in</span> obj ? &#123;[k]: obj[k]&#125; : &#123;&#125;)</span><br><span class="line">               .reduce(<span class="function">(<span class="params">res, o</span>) =&gt;</span> <span class="built_in">Object</span>.assign(res, o), &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> row = &#123;</span><br><span class="line">    <span class="string">'accounts.id'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'client.name'</span>: <span class="string">'John Doe'</span>,</span><br><span class="line">    <span class="string">'bank.code'</span>: <span class="string">'MDAKW213'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = [</span><br><span class="line">    row,</span><br><span class="line">    &#123;<span class="string">'accounts.id'</span>: <span class="number">3</span>, <span class="string">'client.name'</span>: <span class="string">'Steve Doe'</span>, <span class="string">'bank.code'</span>: <span class="string">'STV12JB'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">pick(row, [<span class="string">'client.name'</span>]); <span class="comment">// 取到了 client name</span></span><br><span class="line"></span><br><span class="line">table.map(<span class="function"><span class="params">row</span> =&gt;</span> pick(row, [<span class="string">'client.name'</span>])); <span class="comment">// 取到了一系列 client name</span></span><br></pre></td></tr></table></figure><p>在 pick 函数中用到了一点‘诡计’。首先，我们用 <code>map</code> 遍历了键名数组（keys）, 每次都会返回一个包含当前键名（key）的对象（如果在目标对象（obj）中没有当前键名，就会返回空对象）。然后我们用 <code>reduce</code> 把返回的所有单个键-值对象和合并到一个对象中。</p><p>但是，如果我们想反选（<code>reject</code>）属性／键名呢？改造一下我们的函数就好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">obj, keys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">        .filter(<span class="function"><span class="params">k</span> =&gt;</span> !keys.includes(k))</span><br><span class="line">        .map(<span class="function"><span class="params">k</span> =&gt;</span> (&#123;[k]: obj[k]&#125;))</span><br><span class="line">        .reduce(<span class="function">(<span class="params">res, o</span>) =&gt;</span> <span class="built_in">Object</span>.assign(res, o), &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者, 利用 pick</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">obj, keys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vkeys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">        .filter(<span class="function"><span class="params">k</span> =&gt;</span> !keys.includes(k));</span><br><span class="line">    <span class="keyword">return</span> pick(obj, vkeys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reject(&#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;, [<span class="string">'a'</span>, <span class="string">'b'</span>]); <span class="comment">// =&gt; &#123;c: 4&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候我们需要将一个对象的某些属性放到白名单里，这样来说，我们有一个数组代表了一张数据库表，并且为了一些功能我们需要从中选出（&lt;code&gt;select&lt;/code&gt;）一些字段：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vuejs在資料綁定時會複製更新並替換目標元素</title>
    <link href="http://yoursite.com/2019/11/04/more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding/"/>
    <id>http://yoursite.com/2019/11/04/more/2017-04-06-vuejs-how-vuejs-makes-a-copy-update-replace-inside-the-data-binding/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡單，在從入門到放棄之前，你能很快掌握它的全部知識並投入生產。</p><p>但是如果你不知道它怎麼工作的，有時候它也會難為你。這裡是一個和其它UI框架(Framework7)衝突的例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">date-page</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- load a new page --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test.html"</span>&gt;</span>new page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- test.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">date-page</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;% raw %&#125;&#123;&#123;content&#125;&#125;&#123;% endraw %&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = <span class="keyword">new</span> Framework7();</span><br><span class="line">myApp.onPageInit(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#test'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      content: <span class="string">'hello world'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你可能會驚訝它竟然無法工作，新的page點擊後並沒有顯示出來。事實上，Vue內部會複製目標HTML元素，然後根據綁定的資料更新並替換原來的元素。當Framework7載入新的頁面時，它會調用<code>PageInit</code>回呼函數，這裡我們又調用了Vue在<code>&lt;page&gt;</code>元素上資料綁定，這之後DOM樹裡面包含的已經是新的<code>&lt;page&gt;</code>元素，但Framework7對此並不知情又接著在舊的<code>&lt;page&gt;</code>元素上完成剩下的初始化工作，比如最終顯示這個新的頁面，這就是根本原因。</p><p>為了繞過這個問題，不要讓Vue的元素選擇器錨定在<code>&lt;page&gt;</code>元素上，而是定在它的子元素，這樣Vue做資料綁定時就不會影響到整個頁面顯示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = <span class="keyword">new</span> Framework7();</span><br><span class="line">myApp.onPageInit(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#test1'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      content: <span class="string">'hello world'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="更多資訊"><a href="#更多資訊" class="headerlink" title="更多資訊"></a>更多資訊</h3><ul><li><a href="https://github.com/Vuejs/Vue" target="_blank" rel="noopener">Vue</a></li><li>[Vue教程] (<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a>)</li><li><a href="https://framework7.io/" target="_blank" rel="noopener">Framework7</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;Vuejs是一款簡單而強大的軟體傑作，類似其它流行的UI框架，Angularjs和Reactjs，但不像這兩者令人生畏的複雜性，Vue非常簡
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么你应该在相等比较中使用 Object.is()</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-04-03-why-you-should-use-Object.is()-in-equality-comparison/</id>
    <published>2019-11-04T02:44:10.455Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道 JavasSript 是弱类型的，并且当我们使用 <code>==</code> 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="string">' '</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line">[<span class="number">1</span>] == <span class="literal">true</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>因此 JavaScript 中给我们提供了全等操作符 <code>===</code>, 它比不全等操作符更加严格并且不会发生类型转换。但是用 <code>===</code> 来进行比较并不是最好的解决方案。你可能会得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>好消息是 ES6 中提供了新的 <code>Object.is()</code> 方法，它具有 <code>===</code> 的一些特点，而且更好、更精确，在一些特殊案例中表现的很好：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span> , <span class="string">' '</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">undefined</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is([<span class="number">1</span>], <span class="literal">true</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Mozilla 团队并不认为 Object.is 比 <code>===</code> 更加“严格”，他们说我们应该考虑的是这个方法如何处理 NaN, -0 和 +0。但是总的来说， 我认为它在实际应用中是一个很好的实践。</p><p>现在来看看这张图表的对比…</p><p><img src="http://i.imgur.com/pCyqkLc.png" alt="differences of operators in equality comparisons javascript"></p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><a href="http://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">Equality comparisons and sameness</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们都知道 JavasSript 是弱类型的，并且当我们使用 &lt;code&gt;==&lt;/code&gt; 作比较时，在一些情况下由于类型转换或者说“把两个操作数中的一个转换成另一个，然后在比较”，会出现意想不到的结果。&lt;/p&gt;
&lt;figure class=&quot;highlight java
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>var和ES6的let</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-08-25-keyword-var-vs-let/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-08-25-keyword-var-vs-let/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>通过 <code>var</code> 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，是全域的 。</li><li>透過 <code>let</code> 定义的变量，它的作用域是在一個块（block）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varvslet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// i 是 undefined 的，因为变量提升</span></span><br><span class="line">  <span class="comment">// console.log(j); // ReferenceError: j 没有被定义</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 0, 1, 2</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 3</span></span><br><span class="line">  <span class="comment">// console.log(j); // ReferenceError: j 没有被定义</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 3</span></span><br><span class="line">  <span class="comment">// console.log(j); // ReferenceError: j 没有被定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细的区别"><a href="#详细的区别" class="headerlink" title="详细的区别"></a>详细的区别</h3><ul><li><p>变量提升</p><p><code>let</code> 不會被提升到整个块的作用域。相比之下，<code>var</code> 可以被提升。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// undefined。因为变量提升</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b 没有被定义</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>循环中的闭包</p><p><code>let</code> 在每次循环可以重新被 bind，确保在它之前结束的循环被重新赋值，所以在闭包中它被用來避免一些问题。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 输出 '5' 五次</span></span><br><span class="line">  &#125;, <span class="number">100</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  使用 <code>let</code> 替换 <code>var</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 输出 0, 1, 2, 3, 4</span></span><br><span class="line">  &#125;, <span class="number">100</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们应该用-let-替代-var-嗎？"><a href="#我们应该用-let-替代-var-嗎？" class="headerlink" title="我们应该用 let 替代 var 嗎？"></a>我们应该用 <code>let</code> 替代 <code>var</code> 嗎？</h3><blockquote><p>不是的，<code>let</code> 是新的块作用域。语法强调在 <code>var</code> 已经是区块作用域时時，<code>let</code> 应该替换 <code>var</code> ，否则请不要替换 <code>var</code>。<code>let</code> 改善了在 JS 作用域的选项，而不是取代。<code>var</code> 对于变量依旧是有用的，可被用在整個 function 之中。</p></blockquote><h3 id="let-兼容性"><a href="#let-兼容性" class="headerlink" title="let 兼容性"></a><code>let</code> 兼容性</h3><ul><li><p>在 server 端，比如 Node.js，你现在可以安心的使用 <code>let</code>。</p></li><li><p>在 client 端，通过 transpiler（比如 <a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">Traceur</a>），可以安心的使用 <code>let</code> 语法。否则请在<a href="http://caniuse.com/#search=let" target="_blank" rel="noopener">这里</a>确认你的浏览器是否支持。</p></li></ul><h3 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h3><div>  <a class="jsbin-embed" href="http://jsbin.com/yumaye/embed?js,console" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.39.11"></script></div><h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><ul><li><a href="http://stackoverflow.com/questions/762011/let-keyword-vs-var-keyword" target="_blank" rel="noopener">Let keyword vs var keyword</a></li><li><a href="https://davidwalsh.name/for-and-against-let" target="_blank" rel="noopener">For and against let</a></li><li><a href="http://stackoverflow.com/questions/30899612/explanation-of-let-and-block-scoping-with-for-loops/30900289#30900289" target="_blank" rel="noopener">Explanation of <code>let</code> and block scoping with for loops</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;var&lt;/code&gt; 定义的变量，它的作用域是在 function 或任何外部已经被声明的 function，
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>break 或 continue 循环函数</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-08-17-break-continue-loop-functional/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-08-17-break-continue-loop-functional/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>停止循环是循环中一个常见的需求。使用<code>for</code>循环我们可以用<code>break</code>提前结束循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a[i] === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// stop the loop</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&gt; 0, 1</span></span><br></pre></td></tr></table></figure><p>另一个常见的需求使我们需要直接取得变量。</p><p>一个快速的方式是使用<code>.forEach</code>，但是这样我们就失去了<code>break</code>的能力。这种情况下，最接近的方式是使用<code>return</code>实现<code>continue</code>的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 怎么停止呢?</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(val); <span class="comment">// your code</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//&gt; 0, 1, 3, 4</span></span><br></pre></td></tr></table></figure><p><code>.some</code>是一个原型方法。他用来检测是否某些元素满足所提供的函数。如果任何元素最终返回<code>true</code>，它就会停止运行。更多解释请看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">MDN</a>。</p><p>引子上面链接的一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBiggerThan10 = <span class="function"><span class="params">numb</span> =&gt;</span> numb &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>.some</code>我们拥有了类似<code>.forEach</code>的功能，而且使用<code>return</code>实现了<code>break</code>的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">val, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(val); <span class="comment">// your code</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//&gt; 0, 1</span></span><br></pre></td></tr></table></figure><p>你可以返回<code>false</code>使循环<code>continue</code>到下一个元素。当你返回<code>true</code>时，循环将会<code>break</code>，此时<code>a.some(..)</code>将会<code>return</code> <code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array contains 2</span></span><br><span class="line"><span class="keyword">const</span> isTwoPresent = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">val, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(isTwoPresent);</span><br><span class="line"><span class="comment">//&gt; true</span></span><br></pre></td></tr></table></figure><p>还有<code>.every</code>函数同样可以实现此功能。但此时我们需要返回与<code>.some</code>相反的布尔值。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><div>  <a class="jsbin-embed" href="http://jsbin.com/jopeji/embed?js,console" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.39.11"></script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;停止循环是循环中一个常见的需求。使用&lt;code&gt;for&lt;/code&gt;循环我们可以用&lt;code&gt;break&lt;/code&gt;提前结束循环。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 的逗号操作符</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-08-10-comma-operaton-in-js/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-08-10-comma-operaton-in-js/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>除了分号之外，逗号允许你在同一个地方放多个语句。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++, j++, j++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"i:"</span>+i+<span class="string">", j:"</span>+j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i:<span class="number">0</span>, <span class="attr">j</span>:<span class="number">0</span></span><br><span class="line">i:<span class="number">1</span>, <span class="attr">j</span>:<span class="number">2</span></span><br><span class="line">i:<span class="number">2</span>, <span class="attr">j</span>:<span class="number">4</span></span><br><span class="line">i:<span class="number">3</span>, <span class="attr">j</span>:<span class="number">6</span></span><br><span class="line">i:<span class="number">4</span>, <span class="attr">j</span>:<span class="number">8</span></span><br></pre></td></tr></table></figure><p>当放一个表达式时，它由左到右计算每个表达式，并传回最右边的表达式。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="keyword">return</span> <span class="string">'a'</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="keyword">return</span> <span class="string">'b'</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'c'</span>); <span class="keyword">return</span> <span class="string">'c'</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = (a(), b(), c());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);      <span class="comment">// 输出「c」</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a"</span></span><br><span class="line"><span class="string">"b"</span></span><br><span class="line"><span class="string">"c"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"c"</span></span><br></pre></td></tr></table></figure><ul><li>注意：逗号（<code>,</code>）操作符在 JavaScript 中所有的操作符里是最低的优先顺序，所以没有括号表达式将变为：<code>(x = a()), b(), c();</code>。</li></ul><h5 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h5><div>  <a class="jsbin-embed" href="http://jsbin.com/vimogap/embed?js,console" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.39.11"></script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;除了分号之外，逗号允许你在同一个地方放多个语句。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>复制到粘贴板</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-08-02-copy-to-clipboard/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-08-02-copy-to-clipboard/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。</p><p>这很简单，比较麻烦的是我们必须为需要复制的文本增加<code>&lt;input/&gt;</code>标签。之后我们选择要复制的内容然后调用复制命令<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand" target="_blank" rel="noopener">execCommand</a>.<br><code>execCommand(&#39;copy&#39;)</code> 将会复制被选择的内容。</p><p>此方法目前被所有最新版本的浏览器<a href="http://caniuse.com/#search=execCommand" target="_blank" rel="noopener">支持</a>，它可以让我们执行如<code>复制</code>、<code>剪切</code>、<code>粘贴</code>等命令，还可以改变字体颜色、大小等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#input'</span>).select();</span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br></pre></td></tr></table></figure><p>具体表现看<a href="https://jsbin.com/huhozu/edit?html,js,output" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一个简单的小知识，本周我做了一个简单的“复制到剪贴板”按钮，这是我第一次做这种功能，向大家分享一下我的实现方法。&lt;/p&gt;
&lt;p&gt;这很简单，比较麻烦的是我们必须为需要复制的文本增加&lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt;标签。之后我们选择要复制的内容然后调用
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>用数组建立一个简单的循环</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-05-12-make-easy-loop-on-array/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-05-12-make-easy-loop-on-array/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_looper</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    arr.loop_idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前的元素</span></span><br><span class="line">    arr.current = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>( <span class="keyword">this</span>.loop_idx &lt; <span class="number">0</span> )&#123;<span class="comment">// 第一次检查</span></span><br><span class="line">        <span class="keyword">this</span>.loop_idx = <span class="keyword">this</span>.length - <span class="number">1</span>;<span class="comment">// 更新 loop_idx</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>( <span class="keyword">this</span>.loop_idx &gt;= <span class="keyword">this</span>.length )&#123;<span class="comment">// 第二次检查</span></span><br><span class="line">        <span class="keyword">this</span>.loop_idx = <span class="number">0</span>;<span class="comment">// 更新 loop_idx</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> arr[ <span class="keyword">this</span>.loop_idx ];<span class="comment">//返回元素</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加 loop_idx 然后返回新的当前元素</span></span><br><span class="line">    arr.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.loop_idx++;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.current();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 减少 loop_idx 然后返回新的当前元素</span></span><br><span class="line">    arr.prev = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.loop_idx--;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.current();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_looper( aList);</span><br><span class="line"></span><br><span class="line">aList.current();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; B</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; C</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; D</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; E</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.pop() ;<span class="comment">// -&gt; E</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; D</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; C</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; B</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; D</span></span><br></pre></td></tr></table></figure><p>使用 <code>%</code> ( 取模 ) 操作符更优雅。取模返回除法的余数 ( <code>2 % 5 = 1</code> and <code>5 % 5 = 0</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> aList = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_looper</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    arr.loop_idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return current item</span></span><br><span class="line">    arr.current = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.loop_idx = ( <span class="keyword">this</span>.loop_idx ) % <span class="keyword">this</span>.length;<span class="comment">// 无需检查 !!</span></span><br><span class="line">      <span class="keyword">return</span> arr[ <span class="keyword">this</span>.loop_idx ];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加 loop_idx 然后返回新的当前元素</span></span><br><span class="line">    arr.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.loop_idx++;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.current();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 减少 loop_idx 然后返回新的当前元素</span></span><br><span class="line">    arr.prev = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.loop_idx += <span class="keyword">this</span>.length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.current();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_looper( aList);</span><br><span class="line"></span><br><span class="line">aList.current();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; B</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; C</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; D</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; E</span></span><br><span class="line">aList.next();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.pop() ;<span class="comment">// -&gt; E</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; D</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; C</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; B</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; A</span></span><br><span class="line">aList.prev();<span class="comment">// -&gt; D</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时我们需要不停的循环数组的元素，就像一组旋转的图片，或者音乐的播放列表。这里告诉你如何使一个数组拥有循环的能力：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>处理 Websocket 超时问题</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-03-09-working-with-websocket-timeout/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-03-09-working-with-websocket-timeout/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.455Z</updated>
    
    <content type="html"><![CDATA[<p>在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 <code>timerID</code> 变量.</p><p>让我们来看一下具体实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timerID = <span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepAlive</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="number">20000</span>;  </span><br><span class="line">    <span class="keyword">if</span> (webSocket.readyState == webSocket.OPEN) &#123;  </span><br><span class="line">        webSocket.send(<span class="string">''</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    timerId = setTimeout(keepAlive, timeout);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelKeepAlive</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (timerId) &#123;  </span><br><span class="line">        clearTimeout(timerId);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们实现了我们需要的两个方法，我们可以在 <code>onOpen()</code> 的最后面调用 <code>keepAlive()</code> ，在<code>onClose()</code> 的组后面调用 <code>cancelKeepAlive()</code>。</p><p>好了！我们我们完美的解决了 websocket 超时的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 websocket 连接被建立后，如果一段时间未活动，服务器或防火墙可能会超时或终止连接。想要解决这个问题， 我们可以周期性地给服务器发消息。我们需要两个方法实现：一个来确保连接不会中断，，另一个用来取消此设定。同我们也需要一个 &lt;code&gt;timerID&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>三个实用的javascript小技巧</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-10-28-three-useful-hacks/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-10-28-three-useful-hacks/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从后向前获取数组元素"><a href="#从后向前获取数组元素" class="headerlink" title="从后向前获取数组元素"></a>从后向前获取数组元素</h4><p>如果你想从后向前获取一个数组的元素，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-1</span>)) <span class="comment">// [4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-2</span>)) <span class="comment">// [3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-3</span>)) <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray.slice(<span class="number">-4</span>)) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="短路条件句"><a href="#短路条件句" class="headerlink" title="短路条件句"></a>短路条件句</h4><p>如果你想在某个条件逻辑值为<code>true</code>时，执行某个函数，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  dosomething()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，你可以这样子运用短路：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition &amp;&amp; dosomething()</span><br></pre></td></tr></table></figure><h4 id="用操作符-“-”-来设置默认值"><a href="#用操作符-“-”-来设置默认值" class="headerlink" title="用操作符 “||” 来设置默认值"></a>用操作符 “||” 来设置默认值</h4><p>如果你必须给一个变量赋默认值，可以简单的这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a = a || <span class="string">'default value'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// default value</span></span><br><span class="line"></span><br><span class="line">a = a || <span class="string">'new value'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// default value</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;从后向前获取数组元素&quot;&gt;&lt;a href=&quot;#从后向前获取数组元素&quot; class=&quot;headerlink&quot; title=&quot;从后向前获取数组元素&quot;&gt;&lt;/a&gt;从后向前获取数组元素&lt;/h4&gt;&lt;p&gt;如果你想从后向前获取一个数组的元素，可以这样写：&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>给函数 Bind 对象</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2017-01-19-binding-objects-to-functions/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2017-01-19-binding-objects-to-functions/</id>
    <published>2019-11-04T02:44:10.454Z</published>
    <updated>2019-11-04T02:44:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>我们常常需要将一个对象绑定到一个方法的 <code>this</code> 上。在 JS 中，如果你想要调用一个函数并指定它的 <code>this</code> 时可以使用 <code>bind</code> 方法。</p><h3 id="Bind-语法"><a href="#Bind-语法" class="headerlink" title="Bind 语法"></a>Bind 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><strong>thisArg</strong></p><p>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。</p><p><strong>arg1, arg2, …</strong></p><p>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</p><p><strong>返回值</strong></p><p>返回由指定的this值和初始化参数改造的原函数拷贝</p><h3 id="JS-中的实例"><a href="#JS-中的实例" class="headerlink" title="JS 中的实例"></a>JS 中的实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCar = &#123;</span><br><span class="line"> brand: <span class="string">'Ford'</span>,</span><br><span class="line"> type: <span class="string">'Sedan'</span>,</span><br><span class="line"> color: <span class="string">'Red'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getBrand = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.brand);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.type);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getBrand(); <span class="comment">// object not bind,undefined</span></span><br><span class="line"></span><br><span class="line">getBrand(myCar); <span class="comment">// object not bind,undefined</span></span><br><span class="line"></span><br><span class="line">getType.bind(myCar)(); <span class="comment">// Sedan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> boundGetColor = getColor.bind(myCar);</span><br><span class="line">boundGetColor(); <span class="comment">// Red</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们常常需要将一个对象绑定到一个方法的 &lt;code&gt;this&lt;/code&gt; 上。在 JS 中，如果你想要调用一个函数并指定它的 &lt;code&gt;this&lt;/code&gt; 时可以使用 &lt;code&gt;bind&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h3 id=&quot;Bind-语法&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>new的返回值</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-04-05-return-values-with-the-new-operator/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-04-05-return-values-with-the-new-operator/</id>
    <published>2019-11-04T02:44:10.453Z</published>
    <updated>2019-11-04T02:44:10.453Z</updated>
    
    <content type="html"><![CDATA[<p>你将会遇到在JavaScript中使用<code>new</code>来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。</p><p>JavaScript中的<code>new</code>操作在合理的情况下然会一个新的对象实例。我们来看，我们有一个构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.one = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.two = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myThing = <span class="keyword">new</span> Thing();</span><br><span class="line"></span><br><span class="line">myThing.one <span class="comment">// 1</span></span><br><span class="line">myThing.two <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong>: <code>this</code>指向<code>new</code>产生的新对象。否则如果<code>Thing()</code>不是用<code>new</code>调用, <strong>将不会生成新对象</strong>, 而且<code>this</code> 将会指向全局对象，也就是<code>window</code>。这意味着：</p><ol><li>你突然有两个全局变量<code>one</code>和<code>two</code>。</li><li><code>myThing</code>现在为<code>undefined</code>，因为<code>Thing()</code>中没有返回任何东西。</li></ol><p>现在我们又有一个例子，而它却有些让人搞不懂。我们看我在构造函数里加了一条语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.one = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myThing = <span class="keyword">new</span> Thing();</span><br></pre></td></tr></table></figure><p>现在<code>myThing</code>等于什么呢？5？一个对象？还是我受伤的自我价值观？或许永远不知道！</p><p>除了能知道：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myThing.one <span class="comment">// 1</span></span><br><span class="line">myThing.two <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>很有趣，我们构造函数里<code>返回</code>的5怎么找不到了？这很奇怪不是吗？函数都做了什么？5呢？让我们再试试别的。</p><p>我们返回一个非原始类型试一下，比如一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.one = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.two = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    three: <span class="number">3</span>,</span><br><span class="line">    four: <span class="number">4</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myThing = <span class="keyword">new</span> Thing();</span><br></pre></td></tr></table></figure><p>让我们试一试。直接<code>console.log</code>出所有内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myThing);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Object &#123;three: 3, four: 4&#125;</span></span><br><span class="line"><span class="comment">  this.one 和 this.two发生了什么!?</span></span><br><span class="line"><span class="comment">  他们被覆盖了，朋友。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>我们了解到：</strong> 当你使用<code>new</code>关键字调用一个函数的时候，你可以使用<code>this</code>关键字给其设置参数（但这些你应该已经知道了）。使用<code>new</code>关键字调用一个返回原始变量的函数将不会返回你指定的值，而是返回函数的实例<code>this</code>（你指定参数的那个对象，像 <code>this.one = 1;</code>).</p><p>然而，返回一个非原始变量像<code>object</code>、<code>array</code>或<code>function</code>将会覆盖<code>this</code>实例，并返回那个非原始变量，有效的破坏了你分配给<code>this</code>的所有工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你将会遇到在JavaScript中使用&lt;code&gt;new&lt;/code&gt;来分配新对象的一些情况。这将会扰乱你的思绪，除非你阅读了这篇文章并理解在内部发生了什么。&lt;/p&gt;
&lt;p&gt;JavaScript中的&lt;code&gt;new&lt;/code&gt;操作在合理的情况下然会一个新的对象实例。我们
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>简单监听DOM事件</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-03-16-DOM-event-listening-made-easy/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-03-16-DOM-event-listening-made-easy/</id>
    <published>2019-11-04T02:44:10.453Z</published>
    <updated>2019-11-04T02:44:10.453Z</updated>
    
    <content type="html"><![CDATA[<p>很多人还在这样做：</p><ul><li><code>element.addEventListener(&#39;type&#39;, obj.method.bind(obj))</code></li><li><code>element.addEventListener(&#39;type&#39;, function (event) {})</code></li><li><code>element.addEventListener(&#39;type&#39;, (event) =&gt; {})</code></li></ul><p>上面所有的例子都创建了一个匿名事件监控句柄，且在不需要时无法删除它。这在你不需要某句柄，而它却被用户或<a href="http://www.javascripter.net/faq/eventbubbling.htm" target="_blank" rel="noopener">事件冒泡</a>偶然触发时，可能会导致性能问题或不必要的逻辑问题。</p><p>更安全的事件处理方式如下：</p><p>使用引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Tada!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">element.addEventListener(<span class="string">"click"</span>, handler)</span><br><span class="line"><span class="comment">// 之后</span></span><br><span class="line">element.removeEventListener(<span class="string">"click"</span>, handler)</span><br></pre></td></tr></table></figure><p>命名的函数移除它本身:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (someCondition) &#123;</span><br><span class="line">    <span class="keyword">return</span> e.currentTarget.removeEventListener(<span class="string">'click'</span>, click);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更好的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span> (<span class="params">eventName, &#123;onElement, withCallback, useCapture = false&#125; = &#123;&#125;, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = onElement || <span class="built_in">document</span>.documentElement</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> withCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      withCallback.call(thisArg, event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handler.destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.removeEventListener(eventName, handler, useCapture)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  element.addEventListener(eventName, handler, useCapture)</span><br><span class="line">  <span class="keyword">return</span> handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你需要的时候</span></span><br><span class="line"><span class="keyword">const</span> handleClick = handleEvent(<span class="string">'click'</span>, &#123;</span><br><span class="line">  onElement: element,</span><br><span class="line">  withCallback: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Tada!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你想删除它的时候</span></span><br><span class="line">handleClick.destroy()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人还在这样做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element.addEventListener(&amp;#39;type&amp;#39;, obj.method.bind(obj))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.addEventListene
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>怎样`reduce()`数组</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-02-17-reminders-about-reduce-function-usage/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-02-17-reminders-about-reduce-function-usage/</id>
    <published>2019-11-04T02:44:10.453Z</published>
    <updated>2019-11-04T02:44:10.453Z</updated>
    
    <content type="html"><![CDATA[<p>文档里说<code>reduce()</code>方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a><code>reduce()</code></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">reduce()</a> 函数接收2个参数(M: 必填, O: 可选)：</p><ul><li>(M) 回调<strong>reducer 函数</strong> 处理先前的结算结果和下一个元素直到序列结束。</li><li>(O) <strong>初值</strong> 作为第一次调用回调时的第一个参数。</li></ul><p>所以，让我们先看一个普通用法，之后再看一个复杂用法。</p><h3 id="普通用法-累加，关联"><a href="#普通用法-累加，关联" class="headerlink" title="普通用法 (累加，关联)"></a>普通用法 (累加，关联)</h3><p>我们正在逛亚马逊(单价为美元$) 我们的购物车实在太满了，我们来计算一下总价吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前的购物清单</span></span><br><span class="line"><span class="keyword">var</span> items = [&#123;<span class="attr">price</span>: <span class="number">10</span>&#125;, &#123;<span class="attr">price</span>: <span class="number">120</span>&#125;, &#123;<span class="attr">price</span>: <span class="number">1000</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer函数</span></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">sumSoFar, nextPrice</span>) </span>&#123; <span class="keyword">return</span> sumSoFar + nextPrice.price; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始运行</span></span><br><span class="line"><span class="keyword">var</span> total = items.reduce(reducer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 1130</span></span><br></pre></td></tr></table></figure><p><code>reduce</code>函数可选的参数在第一个例子里是基本变量数字0，但是它也可以是一个对象，数组… 而不仅是基本类型，之后我们将会看到。</p><p>现在，我们收到一个20$的优惠券。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = items.reduce(reducer,<span class="number">-20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 1110</span></span><br></pre></td></tr></table></figure><h3 id="进阶用法-结合"><a href="#进阶用法-结合" class="headerlink" title="进阶用法(结合)"></a>进阶用法(结合)</h3><p>第二种用法的例子是<code>Redux</code>的<a href="http://redux.js.org/docs/api/combineReducers.html" target="_blank" rel="noopener">combineReducers</a>函数<a href="https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93" target="_blank" rel="noopener">源码</a>里用到的。</p><p>此创意是将<code>reducer</code>函数拆分为独立的函数，最后组合成一个新的<em>单一的大<code>reducer</code>函数</em>。 </p><p>为了说明，我们创建一个单一的对象，包含一些可以计算不同货币($, €…)的总价值的<code>reducer</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reducers = &#123;</span><br><span class="line">  totalInDollar: <span class="function"><span class="keyword">function</span>(<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">    state.dollars += item.price;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;,</span><br><span class="line">  totalInEuros : <span class="function"><span class="keyword">function</span>(<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">    state.euros += item.price * <span class="number">0.897424392</span>;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;,</span><br><span class="line">  totalInPounds : <span class="function"><span class="keyword">function</span>(<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">    state.pounds += item.price * <span class="number">0.692688671</span>;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;,</span><br><span class="line">  totalInYen : <span class="function"><span class="keyword">function</span>(<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">    state.yens += item.price * <span class="number">113.852</span>;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// more...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们建立一个瑞士军刀函数 </p><ul><li>能够调用每一部分的<code>reduce</code>函数</li><li>返回一个新的<code>reducer</code>回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> combineTotalPriceReducers = <span class="function"><span class="keyword">function</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">nextState, key</span>) </span>&#123;</span><br><span class="line">        reducers[key](state, item);</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;&#125;      </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们来看一下如何使用它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bigTotalPriceReducer = combineTotalPriceReducers(reducers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialState = &#123;<span class="attr">dollars</span>: <span class="number">0</span>, <span class="attr">euros</span>:<span class="number">0</span>, <span class="attr">yens</span>: <span class="number">0</span>, <span class="attr">pounds</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totals = items.reduce(bigTotalPriceReducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totals);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Object &#123;dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>我希望这种方法可以使你在自己的需求内使用<code>reduce()</code>函数时有新的想法。</p><p>使用<code>reduce</code>函数也可以实现保存每一次计算结果的功能。这在<code>Ramdajs</code>里的<a href="http://ramdajs.com/docs/#scan" target="_blank" rel="noopener">scan</a>函数已经实现了。</p><p><a href="https://jsfiddle.net/darul75/81tgt0cd/" target="_blank" rel="noopener">在JSFiddle里运行</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文档里说&lt;code&gt;reduce()&lt;/code&gt;方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。&lt;/p&gt;
&lt;h3 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>实用的`log`技巧</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-03-03-helpful-console-log-hacks/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-03-03-helpful-console-log-hacks/</id>
    <published>2019-11-04T02:44:10.453Z</published>
    <updated>2019-11-04T02:44:10.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用条件断点输出log"><a href="#使用条件断点输出log" class="headerlink" title="使用条件断点输出log"></a>使用条件断点输出<code>log</code></h2><p>如果你想当函数每次被调用时都在控制台打印一个值，你可以应用条件断点来实现。打开你的开发工具，找到你准备打印的值所在的函数然后使用如下条件设置一个条件断点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(data.value) &amp;&amp; <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>条件断点只有在条件运行的结果为<code>true</code>时才会中断页面。所以使用<code>console.log(&#39;foo&#39;) &amp;&amp; false</code>这样的条件，由于你把<code>false</code>放在了<code>AND</code>条件中，所以结果肯定是<code>false</code>。因此这并不会中断页面但是会打印<code>log</code>到控制台。这也可以应用在计算某个函数或回调被调用了多少次上面。</p><p>这里有各个平台下设置条件断点的方法：<a href="https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints" target="_blank" rel="noopener" title="Managing Breakpoints in Edge">Edge</a>、<a href="https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints" target="_blank" rel="noopener" title="Managing Breakpoints in Chrome">Chrome</a>、<a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint" target="_blank" rel="noopener" title="Managing Breakpoints in Firefox">Firefox</a>、<a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html" target="_blank" rel="noopener" title="Managing Breakpoints in Safari">Safari</a>。</p><h2 id="打印函数到控制台"><a href="#打印函数到控制台" class="headerlink" title="打印函数到控制台"></a>打印函数到控制台</h2><p>你曾经有过打算打印函数到控制台却不能看到函数的代码的情况吗？最快的方法查看函数的代码是将其与空字符串连接，从而将其强制转换为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(funcVariable + <span class="string">''</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用条件断点输出log&quot;&gt;&lt;a href=&quot;#使用条件断点输出log&quot; class=&quot;headerlink&quot; title=&quot;使用条件断点输出log&quot;&gt;&lt;/a&gt;使用条件断点输出&lt;code&gt;log&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果你想当函数每次被调用时都在控制台打印一
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>简单获取unix时间戳</title>
    <link href="http://yoursite.com/2019/11/04/javascript/2016-02-26-extract-unix-timestamp-easily/"/>
    <id>http://yoursite.com/2019/11/04/javascript/2016-02-26-extract-unix-timestamp-easily/</id>
    <published>2019-11-04T02:44:10.453Z</published>
    <updated>2019-11-04T02:44:10.453Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateTime = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="built_in">Math</span>.floor(dateTime / <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="built_in">Math</span>.floor(dateTime / <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>要取得一个具体时间的unix时间戳，将<code>yyyy-mm-dd</code>或<code>YYYY-MM-DDT00:00:00Z</code>作为参数传递给<code>Date</code>构造函数。例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2012-06-08'</span>).getTime();</span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="built_in">Math</span>.floor(dateTime / <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>你还可以像下面一样，在声明<code>Date</code>对象的时候添加一个<code>+</code>号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="built_in">Math</span>.floor(dateTime / <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>或者对于具体时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2012-06-08'</span>);</span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="built_in">Math</span>.floor(dateTime / <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在底层，运行时调用了<code>Date</code>对象的<code>valueOf</code>方法。然后一元操作符<code>+</code>调用了之前返回值的<code>toNumber()</code>方法。想要了解更多内容请参考下面链接</p><ul><li><a href="http://es5.github.io/#x15.9.5.8" target="_blank" rel="noopener">Date.prototype.valueOf</a></li><li><a href="http://es5.github.io/#x11.4.6" target="_blank" rel="noopener">Unary + operator</a></li><li><a href="http://es5.github.io/#x9.3" target="_blank" rel="noopener">toNumber()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">Date Javascript MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse" target="_blank" rel="noopener">Date.parse()</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们经常需要使用unix时间戳计算。有很多方法可以取得unix时间戳。目前取得unix时间戳最简单最快的方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="zh_CN" scheme="http://yoursite.com/categories/zh-CN/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/zh-CN/javascript/"/>
    
    
  </entry>
  
</feed>
